import ftp from "basic-ftp";
import fs from "fs";
import path from "path";
const { FTP_USER_TORGSOFT, FTP_PASS_TORGSOFT } = process.env;

export async function uploadOrderToFTP(order) {
  const client = new ftp.Client();
  client.ftp.verbose = true;

  try {
    // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ orders
    const ordersFolder = path.resolve(
      "C:/Users/home/Documents/GitHub/silvago-backend/orders"
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞ orders, —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    // if (!fs.existsSync(ordersFolder)) {
    //   fs.mkdirSync(ordersFolder, { recursive: true });
    //   console.log(`üìÇ –ü–∞–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${ordersFolder}`);
    // }

    // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    const filePath = path.join(
      ordersFolder,
      `order-${order.Options.OrderNumber}.json`
    );

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª JSON
    fs.writeFileSync(filePath, JSON.stringify(order, null, 2));
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ: ${filePath}`);

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ FTP-—Å–µ—Ä–≤–µ—Ä–∞
    await client.access({
      host: "127.0.0.1", // –í–∞—à FTP-—Å–µ—Ä–≤–µ—Ä
      user: "Torgsoft", // –õ–æ–≥—ñ–Ω –¥–ª—è Torgsoft
      password: "125012001Torgsoft", // –ü–∞—Ä–æ–ª—å
      secure: false,
    });

    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ FTP");

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await client.uploadFrom(
      filePath,
      `/order-${order.Options.OrderNumber}.json`
    );
    console.log("‚úÖ –§–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–æ FTP");

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    // fs.unlinkSync(filePath);
    console.log("üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ.");
  } catch (err) {
    console.error("üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ FTP:", err);
  } finally {
    client.close();
  }
}
