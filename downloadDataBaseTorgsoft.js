import ftp from "basic-ftp";
import fs from "fs";
import path from "path";
import Papa from "papaparse";
import Client from "./models/userTorgsoft.js";

const { FTP_USER_SILVAGO, FTP_PASS_SILVAGO } = process.env;

export async function downloadFiles() {
  const client = new ftp.Client();
  client.ftp.verbose = true; // –£–≤—ñ–º–∫–Ω—É—Ç–∏ –¥–æ–∫–ª–∞–¥–Ω–∏–π –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å

  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ FTP-—Å–µ—Ä–≤–µ—Ä–∞
    await client.access({
      host: "127.0.0.1", // –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
      user: FTP_USER_SILVAGO, // –õ–æ–≥—ñ–Ω
      password: FTP_PASS_SILVAGO, // –ü–∞—Ä–æ–ª—å
      secure: false, // –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—â–µ–Ω–∏–π —Ä–µ–∂–∏–º (SSL)
    });

    console.log("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ FTP");
    const savePath = "C:/Users/home/Documents/GitHub/silvago-backend/dataBase";

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É TSGoods.trs
    await client.downloadTo(`${savePath}/TSGoods.trs`, "TSGoods.trs");
    console.log("–§–∞–π–ª TSGoods.trs —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–æ dataBase");

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É TSClients.trs
    await client.downloadTo(`${savePath}/TSClients.trs`, "TSClients.trs");
    console.log("–§–∞–π–ª TSClients.trs —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–æ dataBase");
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:", err);
  } finally {
    client.close(); // –ó–∞–∫—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
  }
}

export async function updateClientBonuses() {
  try {
    const filePath = path.resolve(
      "C:/Users/home/Documents/GitHub/silvago-backend/dataBase/TSClients.trs"
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
    if (!fs.existsSync(filePath)) {
      console.error("üö® –§–∞–π–ª TSClients.csv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
      return;
    }

    // –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    const fileContent = fs.readFileSync(filePath, "utf-8");

    // –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª—É
    const { data } = Papa.parse(fileContent, {
      header: false,
      skipEmptyLines: true,
    });

    console.log("‚úÖ –î–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", data);

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    for (const row of data) {
      const email = row[1]?.trim(); // Email (2-–π —Å—Ç–æ–≤–ø–µ—Ü—å)
      const phone = row[2]?.replace(/\D/g, ""); // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (3-–π —Å—Ç–æ–≤–ø–µ—Ü—å), –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
      const bonuses = parseFloat(row[13].replace(",", ".")) || 0; // –ë–æ–Ω—É—Å–∏ (14-–π —Å—Ç–æ–≤–ø–µ—Ü—å)

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ email –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      if (!email && !phone) {
        console.warn("üö® Email —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å—É.");
        continue;
      }

      let updatedClient = null;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ email
      if (email) {
        updatedClient = await Client.findOneAndUpdate(
          { email: email },
          { $set: { bonuses: bonuses } },
          { new: true }
        );
      }

      // –Ø–∫—â–æ –∑–∞ email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
      if (!updatedClient && phone) {
        updatedClient = await Client.findOneAndUpdate(
          { phone: phone },
          { $set: { bonuses: bonuses } },
          { new: true }
        );
      }

      if (updatedClient) {
        console.log(
          `‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –±–æ–Ω—É—Å–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞: ${updatedClient.firstName} ${updatedClient.lastName}`
        );
      } else {
        console.warn(
          `‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ email: ${email || "N/A"} –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${
            phone || "N/A"
          } –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.`
        );
      }
    }

    console.log("üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    console.error("üö® –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:", error);
  }
}
