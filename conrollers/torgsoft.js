import fs from "fs/promises";
import path from "path";
import Goods from "../models/torgsoftTest.js";
import Papa from "papaparse";
import iconv from "iconv-lite";
import slugify from "slugify";
import BrandTorgsoft from "../models/brandModel.js";
import CategoryTorg from "../models/categoryTorgsoft.js";
import mongoose from "mongoose";
import { Filter } from "../models/filters.js";

// –®–ª—è—Ö–∏ –¥–æ –ø–∞–ø–æ–∫
const sourceFolder = "C:\\–ñ—É—Ä–Ω–∞–ª Torgsoft";
const destinationFolder =
  "C:\\Users\\GGEZ\\Documents\\GitHub\\silvago-backend\\dataBase";
// "C:\Users\GGEZ\Documents\GitHub\silvago-backend\dataBase"
const goodsFile = path.join(destinationFolder, "TSGoods.trs");
// const clientsFile = path.join(destinationFolder, "TSClients.trs");

async function copyFile(fileName) {
  const sourcePath = path.join(sourceFolder, fileName);
  const destPath = path.join(destinationFolder, fileName);

  try {
    await fs.copyFile(sourcePath, destPath); // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –±–µ–∑ –∫–æ–ª–±–µ–∫—É
    return `–§–∞–π–ª ${fileName} —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ.`;
  } catch (err) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${fileName}: ${err.message}`);
  }
}

export const getBd = async (req, res) => {
  try {
    // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –∑ Torgsoft
    const results = await Promise.all([
      // copyFile("TSClients.trs"),
      copyFile("TSGoods.trs"),
    ]);

    // –ü–∞—Ä—Å–∏–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ —Ñ–∞–π–ª—É
    const parsedProducts = await parseGoodsFile();

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ —É –±–∞–∑—É –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏
    await saveProductsToDb(parsedProducts);

    res.json({
      message: "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞",
      details: results,
      products: parsedProducts,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:", error);
    res.status(500).json({
      message: "–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó",
      error: error.message,
    });
  }
};

export async function parseGoodsFile() {
  try {
    // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —è–∫ Buffer
    const fileBuffer = await fs.readFile(goodsFile);

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ Windows-1251 —É UTF-8
    const fileContent = iconv.decode(fileBuffer, "win1251");

    // –ü–∞—Ä—Å–∏–º–æ CSV
    const parsedData = Papa.parse(fileContent, {
      header: false, // –£ –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ –Ω–µ–º–∞—î –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
      delimiter: ";", // –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫
      skipEmptyLines: true,
    });
    // console.log("parsedData", parsedData);
    // –ú–∞–ø—ñ–Ω–≥ –¥–∞–Ω–∏—Ö
    const products = parsedData.data.map((row) => ({
      id: parseInt(row[0], 10), // ID —Ç–æ–≤–∞—Ä—É
      brand: row[41], // –ù–∞–∑–≤–∞ –¥–ª—è –±—Ä–µ–Ω–¥—É
      fullName: row[1], // –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –æ–±'—î–º—ñ–≤
      description: row[2], // –û–ø–∏—Å
      country: row[3], // –ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫
      retailPrice: parseFloat(row[5]), // –¶—ñ–Ω–∞
      discountPrice: parseFloat(row[7]), // –¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é
      discount: row[40], // –∑–Ω–∏–∂–∫–∞
      barcode: row[21], // –®—Ç—Ä–∏—Ö–∫–æ–¥
      article: row[4], // –ê—Ä—Ç–∏–∫—É–ª
      quantity: row[10],
      volume: row[12], // –æ–±'—î–º
      tone: row[13], // 12
      categories: parseCategories(row[47]), // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
      productTypeFull: row[18], // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
      skinNeeds: row[51], // –ü–æ—Ç—Ä–µ–±–∏ —à–∫—ñ—Ä–∏
      modelName: row[15], // –Ω–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ
      modelId: row[42], // Id –º–æ–¥–µ–ª—ñ
      measure: row[39],
      randomOrderKey: Math.random(),
    }));

    // console.log("–†–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:", products);
    return products;
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É —Ç–æ–≤–∞—Ä—ñ–≤:", err);
    throw err;
  }
}

export async function saveProductsToDb(products) {
  try {
    await syncBrands(products);
    await syncCategories(products);
    const photosFolder = path.resolve("C:\\TORGSOFT\\Photo");
    const files = await fs.readdir(photosFolder);

    const photoMap = files.reduce((acc, file) => {
      const match = file.match(/^(\d+)(_?\d*)\.(jpg|png)$/);
      if (match) {
        const id = match[1];
        acc[id] = acc[id] || [];
        acc[id].push(`http://localhost:3030/photos/${file}`);
      }
      return acc;
    }, {});

    // –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ modelId
    const groupedProducts = products.reduce((acc, product) => {
      console.log("productüé∂üíñüíñüíã: ", product);
      const photos = photoMap[product.id] || [];
      // console.log("photos: ", photos[0]);
      const groupKey = product.modelId;

      if (!acc[groupKey]) {
        acc[groupKey] = {
          // name: product.name,
          modelName: product.modelName,
          modelId: product.modelId,
          brand: product.brand,
          country: product.country,
          categories: product.categories,
          measure: product.measure,
          variations: [],
          randomOrderKey: product.randomOrderKey,
          // skinNeeds: product.skinNeeds.trim() === "" ? null : product.skinNeeds,
        };
      }

      const existingVariation = acc[groupKey].variations.find(
        (v) => v.idTorgsoft === product.id
      );

      if (!existingVariation) {
        acc[groupKey].variations.push({
          idTorgsoft: product.id,
          fullName: product.fullName,
          volume: product.volume,
          tone: product.tone || null,
          retailPrice: product.retailPrice,
          discountPrice: product.discountPrice || null,
          discount: product.discount || 0,
          quantity: product.quantity,
          barcode: product.barcode,
          image: photos[0],
          images: photos,
          slug: `${slugify(product.modelName, {
            lower: true,
            strict: true,
          })}${
            product.tone ? `-${product.tone}` : ""
          }-${product.volume.trim()}${slugify(product.measure.trim(), {
            lower: true,
            strict: true,
          })}`,
          isDefault: false,
        });
      }

      return acc;
    }, {});

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
    const finalProducts = Object.values(groupedProducts);
    // console.log("finalProducts: ", finalProducts);

    for (const product of finalProducts) {
      if (product.variations.length > 0) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –æ–±'—î–º–æ–º
        const defaultVariation = product.variations.reduce((max, variation) => {
          const currentVolume = parseFloat(variation.volume); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ volume —É —á–∏—Å–ª–æ
          const maxVolume = parseFloat(max?.volume || 0); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ max.volume —É —á–∏—Å–ª–æ
          return currentVolume > maxVolume ? variation : max;
        }, null);

        if (defaultVariation) {
          defaultVariation.isDefault = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ isDefault
        }
      }
    }

    for (const product of finalProducts) {
      if (product.skinNeeds) {
        await updateFilter("skinNeeds", product.skinNeeds.split(","));
      }
      await Goods.updateOne(
        { modelId: product.modelId },
        { $set: product },
        { upsert: true }
      );
    }

    console.log(`–£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ${finalProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤.`);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ —É –±–∞–∑—É:", err);
    throw err;
  }
}

async function syncCategories(products) {
  const categoryTree = {};

  for (const product of products) {
    let currentLevel = categoryTree;

    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—É
    for (const category of product.categories) {
      const slug = slugify(category.name, { lower: true, strict: true });

      // –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î –Ω–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ
      if (!currentLevel[slug]) {
        currentLevel[slug] = {
          idTorgsoft: category.idTorgsoft,
          name: category.name,
          slug,
          children: {},
          _id: new mongoose.Types.ObjectId(), // –ì–µ–Ω–µ—Ä—É—î–º–æ _id
        };
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –¥–æ—á—ñ—Ä–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
      currentLevel = currentLevel[slug].children;
    }
  }

  // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è MongoDB
  const buildMongoTree = (tree) => {
    return Object.values(tree).map((node) => ({
      idTorgsoft: node.idTorgsoft, // –î–æ–¥–∞—î–º–æ ID Torgsoft
      name: node.name, // –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      slug: node.slug,
      children: buildMongoTree(node.children),
      _id: node._id,
    }));
  };

  const categoriesToSave = buildMongoTree(categoryTree);

  // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é
  await CategoryTorg.deleteMany();
  await CategoryTorg.insertMany(categoriesToSave);

  console.log("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");
}

function parseCategories(categoryString) {
  // console.log("categoryString: ", categoryString);
  return categoryString
    .split(";")
    .map((item) => {
      // console.log("item: ", item);
      const [id, categoryName] = item.split("=");
      // console.log("id: ", id);
      if (!id || !categoryName) return null; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

      return {
        idTorgsoft: parseInt(id, 10), // –ü—Ä–µ–æ–±—Ä–∞–∑—É—î–º–æ ID —É —á–∏—Å–ª–æ
        name: categoryName.trim(), // –ó–∞–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —É –Ω–∞–∑–≤—ñ
        slug: slugify(categoryName.trim(), { lower: true, strict: true }), // –§–æ—Ä–º—É—î–º–æ slug
      };
    })
    .filter(Boolean); // –í–∏–¥–∞–ª—è—î–º–æ null –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
}

//–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π

export async function getCategoriesTree(req, res) {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –±–∞–∑–∏
    const categories = await CategoryTorg.find();

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞–ø—Ä—è–º—É
    res.json(categories);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π" });
  }
}

//–í–∏–±—ñ—Ä —Ç–æ–Ω—É –∞–±–æ –æ–±'—î–º—É
const updateFilter = async (type, options) => {
  const filter = await Filter.findOne({ type });

  if (!filter) {
    // –Ø–∫—â–æ —Ñ—ñ–ª—å—Ç—Ä —â–µ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    const newFilter = {
      type,
      options: options.map((name, index) => ({
        name: name.trim(),
        value: index + 1,
        slug: slugify(name.trim(), { lower: true, strict: true }), // –§–æ—Ä–º—É—î–º–æ slug
      })),
    };
    await Filter.create(newFilter);
  } else {
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Ñ—ñ–ª—å—Ç—Ä, –¥–æ–¥–∞—é—á–∏ –Ω–æ–≤—ñ –æ–ø—Ü—ñ—ó
    const existingOptions = filter.options.map((opt) => opt.name);
    const newOptions = options.filter(
      (name) => !existingOptions.includes(name.trim())
    );

    filter.options.push(
      ...newOptions.map((name, index) => ({
        name: name.trim(),
        value: filter.options.length + index + 1,
        slug: slugify(name.trim(), { lower: true, strict: true }), // –§–æ—Ä–º—É—î–º–æ slug
      }))
    );

    await filter.save();
  }
};

export const getSkinFilters = async (req, res, next) => {
  try {
    const skin = await Filter.find();

    res.json(skin);
  } catch (error) {
    next(error);
  }
};

async function syncBrands(products) {
  try {
    const brandsSet = new Set();

    // –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –±—Ä–µ–Ω–¥–∏ –∑ —Ç–æ–≤–∞—Ä—ñ–≤
    products.forEach((product) => {
      if (product.brand) {
        brandsSet.add(product.brand);
      }
    });

    // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ –º–∞—Å–∏–≤
    const uniqueBrands = Array.from(brandsSet);

    for (const brandName of uniqueBrands) {
      const slug = slugify(brandName, { lower: true, strict: true });

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—Ä–µ–Ω–¥ —É–∂–µ —ñ—Å–Ω—É—î
      const existingBrand = await BrandTorgsoft.findOne({ name: brandName });

      if (!existingBrand) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π —ñ—Å–Ω—É—é—á–∏–π numberId
        const lastBrand = await BrandTorgsoft.findOne()
          .sort({ numberId: -1 })
          .select("numberId");

        const newNumberId = lastBrand ? lastBrand.numberId + 1 : 1; // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π ID

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥
        await BrandTorgsoft.create({
          name: brandName,
          slug,
          numberId: newNumberId,
        });
      } else {
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –±—Ä–µ–Ω–¥ (slug –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—è)
        existingBrand.slug = slug;
        await existingBrand.save();
      }
    }

    console.log("–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±—Ä–µ–Ω–¥—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±—Ä–µ–Ω–¥—ñ–≤:", error);
  }
}

export async function generateBreadcrumbs(categories, product, volume) {
  console.log("product: ", product);
  const breadcrumbs = [{ name: "Silvago", slug: "/" }];

  // –î–æ–¥–∞—î–º–æ "–ö–∞—Ç–∞–ª–æ–≥" –¥–æ —Ö–ª—ñ–±–Ω–∏—Ö –∫—Ä–∏—Ö—Ç
  breadcrumbs.push({ name: "–ö–∞—Ç–∞–ª–æ–≥", slug: "/catalog" });

  // –°–æ—Ä—Ç—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ `idTorgsoft`, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
  const sortedCategories = categories.sort(
    (a, b) => a.idTorgsoft - b.idTorgsoft
  );

  let lastCategorySlug = "/catalog";

  // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —É breadcrumbs
  sortedCategories.forEach((category) => {
    lastCategorySlug = `/catalog/category/${category.slug}`;
    breadcrumbs.push({
      name: category.name,
      slug: lastCategorySlug,
    });
  });

  // –û—Ç—Ä–∏–º—É—î–º–æ ID –±—Ä–µ–Ω–¥—É –ø–æ –Ω–∞–∑–≤—ñ (–∑–∞–ø–∏—Ç —É –ë–î)
  let brandId = null;
  if (product.brand) {
    const brandData = await BrandTorgsoft.findOne({
      name: product.brand,
    }).lean();
    if (brandData) {
      brandId = brandData.numberId; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø–æ–ª–µ ID –±—Ä–µ–Ω–¥—É - —Ü–µ `numberId`
    }
  }

  // –Ø–∫—â–æ —î –±—Ä–µ–Ω–¥ —Ç–∞ ID –±—Ä–µ–Ω–¥—É, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ —è–∫ –æ–∫—Ä–µ–º–∏–π –µ–ª–µ–º–µ–Ω—Ç
  if (product.brand && brandId) {
    breadcrumbs.push({
      name: `${sortedCategories[sortedCategories.length - 1].name} ${
        product.brand
      }`,
      slug: `${lastCategorySlug}/filter/brands=${brandId}`,
    });
  }

  // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
  breadcrumbs.push({
    name: volume.fullName,
    slug: null, // –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  });

  return breadcrumbs;
}
